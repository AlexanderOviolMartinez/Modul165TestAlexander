âœ… Aufgabe 2: CRUD Endpunkte mit Beispielcode (ohne Datenbank)

ðŸ”¹ Modell Movie erstellen

â€¢ Film-Modell anlegen mit ID, Titel, Jahr, Zusammenfassung, Schauspieler
public class Movie
{
    public string Id { get; set; } = "";
    public string Title { get; set; } = "";
    public int Year { get; set; }
    public string Summary { get; set; } = "";
    public string[] Actors { get; set; } = Array.Empty<string>();
}


ðŸ”¹ CRUD-Endpunkte in Program.cs hinzufÃ¼gen

â€¢ In-Memory-Liste fÃ¼r Filme definieren
var movies = new List<Movie>();


â€¢ Insert Movie â€“ Film einfÃ¼gen, 200 OK oder 409 bei Fehler
app.MapPost("/api/movies", (Movie movie) =>
{
    if (movies.Any(m => m.Id == movie.Id))
    {
        return Results.Conflict("Ein Film mit dieser ID existiert bereits.");
    }
    movies.Add(movie);
    return Results.Ok(movie);
});


â€¢ Get all Movies â€“ Alle Filme zurÃ¼ckgeben
app.MapGet("/api/movies", () =>
{
    return Results.Ok(movies);
});


â€¢ Get Movie by id â€“ Film nach ID finden
app.MapGet("/api/movies/{id}", (string id) =>
{
    var movie = movies.FirstOrDefault(m => m.Id == id);
    return movie != null ? Results.Ok(movie) : Results.NotFound();
});


â€¢ Update Movie â€“ Bestehenden Film aktualisieren
app.MapPut("/api/movies/{id}", (string id, Movie updatedMovie) =>
{
    var index = movies.FindIndex(m => m.Id == id);
    if (index == -1)
        return Results.NotFound();

    movies[index] = updatedMovie;
    return Results.Ok(updatedMovie);
});


â€¢ Delete Movie â€“ Film entfernen
app.MapDelete("/api/movies/{id}", (string id) =>
{
    var movie = movies.FirstOrDefault(m => m.Id == id);
    if (movie == null)
        return Results.NotFound();

    movies.Remove(movie);
    return Results.Ok();
});


ðŸ”¹ Beispiel fÃ¼r einen spezifischen GET-Request

â€¢ Beispielcode: Film mit ID "1" zurÃ¼ckgeben
app.MapGet("/api/movies/{id}", (string id) =>
{
    if(id == "1")
    {
        var myMovie = new Movie()
        {
            Id = "1",
            Title = "Asterix und Obelix"
        };
        return Results.Ok(myMovie);
    }
    else
    {
        return Results.NotFound();
    }
});


ðŸ”¹ Test mit Postman

â€¢ JSON-Body â†’ In Postman: Tab "Body" > raw > JSON
â€¢ HTTP-Methode korrekt wÃ¤hlen: POST, GET, PUT, DELETE
â€¢ Endpunkte testen: /api/movies, /api/movies/{id}