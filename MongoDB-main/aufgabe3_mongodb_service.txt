âœ… Aufgabe 3: MongoDB-Zugriffe auslagern in Service mit Dependency Injection

ðŸ”¹ Interface IMovieService erstellen

â€¢ Basis-Interface fÃ¼r Mongo-Service
public interface IMovieService
{
    string Check();
    void Create(Movie movie);
    IEnumerable<Movie> Get();
    Movie Get(string id);
    void Update(string id, Movie movie);
    void Remove(string id);
}


ðŸ”¹ MongoMovieService implementieren

â€¢ Konstruktor erhÃ¤lt Datenbankeinstellungen per DI
â€¢ Zugriff auf Collection "movies" in DB "gbs"
using Microsoft.Extensions.Options;
using MongoDB.Driver;

public class MongoMovieService : IMovieService
{
    private readonly IMongoCollection<Movie> _movies;

    public MongoMovieService(IOptions<DatabaseSettings> options)
    {
        var client = new MongoClient(options.Value.ConnectionString);
        var database = client.GetDatabase("gbs");
        _movies = database.GetCollection<Movie>("movies");
    }

    public string Check()
    {
        try
        {
            var databases = _movies.Database.Client.ListDatabaseNames().ToList();
            return "Zugriff auf MongoDB ok. Datenbanken: " + string.Join(", ", databases);
        }
        catch (Exception ex)
        {
            return "Fehler: " + ex.Message;
        }
    }

    public void Create(Movie movie)
    {
        _movies.InsertOne(movie);
    }

    public IEnumerable<Movie> Get()
    {
        return _movies.Find(_ => true).ToList();
    }

    public Movie Get(string id)
    {
        return _movies.Find(m => m.Id == id).FirstOrDefault();
    }

    public void Update(string id, Movie movie)
    {
        _movies.ReplaceOne(m => m.Id == id, movie);
    }

    public void Remove(string id)
    {
        _movies.DeleteOne(m => m.Id == id);
    }
}


ðŸ”¹ Movie-Modell erweitern

â€¢ Attribut fÃ¼r MongoDB-ID
using MongoDB.Bson.Serialization.Attributes;

public class Movie
{
    [BsonId]
    public string Id { get; set; } = "";
    public string Title { get; set; } = "";
    public int Year { get; set; }
    public string Summary { get; set; } = "";
    public string[] Actors { get; set; } = Array.Empty<string>();
}


ðŸ”¹ MongoMovieService in Program.cs registrieren

â€¢ Service als Singleton hinzufÃ¼gen
builder.Services.AddSingleton<IMovieService, MongoMovieService>();


ðŸ”¹ /check-Endpunkt mit Service verwenden

â€¢ VerbindungsprÃ¼fung Ã¼ber MovieService
app.MapGet("/check", (IMovieService movieService) => {
    return movieService.Check();
});


ðŸ”¹ CRUD-Endpunkte anpassen (Verwendung des Services)

â€¢ POST: Film einfÃ¼gen
app.MapPost("/api/movies", (IMovieService movieService, Movie movie) =>
{
    movieService.Create(movie);
    return Results.Ok(movie);
});

â€¢ GET all: Alle Filme
app.MapGet("/api/movies", (IMovieService movieService) =>
{
    return Results.Ok(movieService.Get());
});

â€¢ GET by ID
app.MapGet("/api/movies/{id}", (IMovieService movieService, string id) =>
{
    var movie = movieService.Get(id);
    return movie != null ? Results.Ok(movie) : Results.NotFound();
});

â€¢ PUT: Film aktualisieren
app.MapPut("/api/movies/{id}", (IMovieService movieService, string id, Movie movie) =>
{
    var existing = movieService.Get(id);
    if (existing == null) return Results.NotFound();
    movieService.Update(id, movie);
    return Results.Ok(movie);
});

â€¢ DELETE: Film lÃ¶schen
app.MapDelete("/api/movies/{id}", (IMovieService movieService, string id) =>
{
    var movie = movieService.Get(id);
    if (movie == null) return Results.NotFound();
    movieService.Remove(id);
    return Results.Ok();
});


ðŸ”¹ Testen der Anwendung

â€¢ mit dotnet run â†’ lokale PrÃ¼fung
â€¢ mit docker compose up â†’ Container-Test
â€¢ mit Postman: alle CRUD-Endpunkte ansteuern