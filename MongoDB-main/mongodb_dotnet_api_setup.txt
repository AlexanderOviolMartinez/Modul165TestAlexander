âœ… Aufgabe 1: MongoDB + .NET Minimal API Setup

ðŸ”¹ MongoDB Container lokal erstellen

â€¢ Volume erstellen â†’ FÃ¼r persistente Speicherung
docker volume create mongo_data

â€¢ MongoDB starten â†’ Mit Root-User und Passwort im Hintergrund
docker run -d   --name mongodb   -v mongo_data:/data/db   -p 27017:27017   -e MONGO_INITDB_ROOT_USERNAME=gbs   -e MONGO_INITDB_ROOT_PASSWORD=geheim   mongo


ðŸ”¹ .NET Projekt erstellen

â€¢ Projektordner erstellen
mkdir min-api-with-mongo
cd min-api-with-mongo

â€¢ Minimal API-Projekt erzeugen
dotnet new webapi -n WebApi

â€¢ In Projektordner wechseln
cd WebApi


ðŸ”¹ MongoDB NuGet Paket installieren

â€¢ MongoDB Treiber installieren
dotnet add package MongoDB.Driver


ðŸ”¹ Test-Endpunkt `/check` hinzufÃ¼gen

â€¢ Verbindung zu MongoDB prÃ¼fen + Datenbanken listen
app.MapGet("/check", () =>
{
    try
    {
        var mongoDbConnectionString = "mongodb://gbs:geheim@localhost:27017";
        var client = new MongoClient(mongoDbConnectionString);
        var dbs = client.ListDatabaseNames().ToList();
        return Results.Ok("Zugriff auf MongoDB ok. Datenbanken: " + string.Join(", ", dbs));
    }
    catch (Exception ex)
    {
        return Results.Problem("Fehler: " + ex.Message);
    }
});

â€¢ Root-Endpunkt einfache Meldung
app.MapGet("/", () => "Minimal API Version 1.0");


ðŸ”¹ Konfiguration in `appsettings.json` verschieben

â€¢ Verbindung aus Datei statt Hardcode
{
  "AllowedHosts": "*",
  "DatabaseSettings": {
    "ConnectionString": "mongodb://gbs:geheim@localhost:27017"
  }
}


ðŸ”¹ Klasse fÃ¼r Konfiguration erstellen

â€¢ Konfigurationsklasse fÃ¼r DI
public class DatabaseSettings
{
    public string ConnectionString { get; set; } = "";
}


ðŸ”¹ Konfiguration in `Program.cs` einbinden

â€¢ Settings laden und bereitstellen
var movieDatabaseConfigSection = builder.Configuration.GetSection("DatabaseSettings");
builder.Services.Configure<DatabaseSettings>(movieDatabaseConfigSection);

â€¢ `/check` mit DI lesen
app.MapGet("/check", (Microsoft.Extensions.Options.IOptions<DatabaseSettings> options) =>
{
    try
    {
        var mongoDbConnectionString = options.Value.ConnectionString;
        var client = new MongoClient(mongoDbConnectionString);
        var dbs = client.ListDatabaseNames().ToList();
        return Results.Ok("Zugriff auf MongoDB ok. Datenbanken: " + string.Join(", ", dbs));
    }
    catch (Exception ex)
    {
        return Results.Problem("Fehler: " + ex.Message);
    }
});


ðŸ”¹ Dockerfile fÃ¼r WebApi

â€¢ Dockerfile fÃ¼r WebApi-Projekt
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
WORKDIR /app
EXPOSE 5001

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src
COPY . .
RUN dotnet restore
RUN dotnet publish -c Release -o /app

FROM base AS final
WORKDIR /app
COPY --from=build /app .
ENTRYPOINT ["dotnet", "WebApi.dll"]


ðŸ”¹ Docker Compose mit WebApi + MongoDB

â€¢ Beide Dienste gemeinsam starten
version: '3.8'

services:
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: gbs
      MONGO_INITDB_ROOT_PASSWORD: geheim

  webapi:
    build: ./WebApi
    ports:
      - "5001:5001"
    depends_on:
      - mongodb
    environment:
      DatabaseSettings__ConnectionString: "mongodb://gbs:geheim@mongodb:27017"

volumes:
  mongo_data:


ðŸ”¹ Anwendung starten

â€¢ Docker Compose starten
docker compose up --build

â€¢ Im Browser prÃ¼fen
http://localhost:5001/check